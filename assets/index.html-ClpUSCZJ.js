import{_ as a,c as t,b as o,o as i}from"./app-B_u-pbfJ.js";const n={};function r(s,e){return i(),t("div",null,e[0]||(e[0]=[o('<h2 id="i-o设备" tabindex="-1"><a class="header-anchor" href="#i-o设备"><span>I/O设备</span></a></h2><h2 id="i-o控制方式" tabindex="-1"><a class="header-anchor" href="#i-o控制方式"><span>I/O控制方式</span></a></h2><blockquote><p>I/O控制：控制设备和主机之间的数据传送。</p></blockquote><p>因为CPU是宝贵的资源，我们不应该将其用于繁杂的I/O控制事务，所以，整个I/O控制方式的发展都是以<strong>尽量减少CPU对I/O控制的干预</strong>为中心的。</p><h3 id="_1、程序直接控制方式" tabindex="-1"><a class="header-anchor" href="#_1、程序直接控制方式"><span>1、程序直接控制方式</span></a></h3><h3 id="_2、中断驱动方式" tabindex="-1"><a class="header-anchor" href="#_2、中断驱动方式"><span>2、中断驱动方式</span></a></h3><h3 id="_3、dma方式" tabindex="-1"><a class="header-anchor" href="#_3、dma方式"><span>3、DMA方式</span></a></h3><p>虽然中断方式可以使得CPU和设备并行运行，但是可以运行的时间太短了，只有一个<strong>字节</strong>的长度，故DMA就是为解决这个痛点而出现的。</p><blockquote><p>基本思想：在I/O设备和内存之间开辟<strong>直接的数据交换通路</strong>，彻底解放CPU。</p></blockquote><p>采用DMA方式的话，其：</p><ul><li>基本的传送单位就由字节转变为<strong>数据块</strong>，并行运行的时间更长了</li><li>传输的数据不用再通过CPU了，直接从设备到内存或相反，减少了不必要的时间</li><li>仅在传送一个或多个数据块的开始和结束时，CPU才会干预</li></ul><p>这些特点都是采用DMA后的优点，可以看出DMA有点像一个“秘书”，可以帮助CPU处理一定的操作。</p><p>当然，DMA为了实现上面的功能，还需要额外的<strong>寄存器</strong>。</p><p>分别有：</p><ul><li>CR（命令/状态寄存器）：暂存从CPU发来的I/O命令或设备状态信息</li><li>MAR（内存地址寄存器）：</li><li>DR（数据寄存器）：</li><li>DC（数据计数器）：用于存放本次要传输的字节数</li></ul><h3 id="_4、通道控制方式" tabindex="-1"><a class="header-anchor" href="#_4、通道控制方式"><span>4、通道控制方式</span></a></h3><p>I/O通道是一种特殊的<strong>处理机</strong>，换句话说就是一个微型CPU。其可以执行一系列通道指令。</p><p>在设置通道后，CPU只需要向通到发送一条I/O指令，指明通道程序在<strong>内存中的位置</strong>和<strong>要访问的I/O设备</strong>则可。在完成I/O任务后，向CPU发送中断请求，通道方式可以实现CPU、通道和I/O设备三者并行工作，从而提高了整个系统的资源利用率。</p><h2 id="i-o软件层次结构" tabindex="-1"><a class="header-anchor" href="#i-o软件层次结构"><span>I/O软件层次结构</span></a></h2><p>从高到底的结构为：</p><ol><li>用户层软件</li><li>设备独立性软件</li><li>设备驱动程序</li><li>中断处理程序</li></ol><p>在往下就是硬件了，每层都利用下层提供的服务，又为上次提供服务接口。</p><h2 id="应用程序i-o接口" tabindex="-1"><a class="header-anchor" href="#应用程序i-o接口"><span>应用程序I/O接口</span></a></h2>',23)]))}const p=a(n,[["render",r]]),d=JSON.parse('{"path":"/cs-basic/os/device-manager/","title":"输入/输出管理","lang":"zh-CN","frontmatter":{"title":"输入/输出管理","createTime":"2025/05/16 21:54:05","permalink":"/cs-basic/os/device-manager/","icon":"bi:device-hdd","description":"I/O设备 I/O控制方式 I/O控制：控制设备和主机之间的数据传送。 因为CPU是宝贵的资源，我们不应该将其用于繁杂的I/O控制事务，所以，整个I/O控制方式的发展都是以尽量减少CPU对I/O控制的干预为中心的。 1、程序直接控制方式 2、中断驱动方式 3、DMA方式 虽然中断方式可以使得CPU和设备并行运行，但是可以运行的时间太短了，只有一个字节的...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"输入/输出管理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-21T13:46:36.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://codelifethinking.com/CodeLifeThinking/cs-basic/os/device-manager/"}],["meta",{"property":"og:site_name","content":"代码・生 活・THINKING"}],["meta",{"property":"og:title","content":"输入/输出管理"}],["meta",{"property":"og:description","content":"I/O设备 I/O控制方式 I/O控制：控制设备和主机之间的数据传送。 因为CPU是宝贵的资源，我们不应该将其用于繁杂的I/O控制事务，所以，整个I/O控制方式的发展都是以尽量减少CPU对I/O控制的干预为中心的。 1、程序直接控制方式 2、中断驱动方式 3、DMA方式 虽然中断方式可以使得CPU和设备并行运行，但是可以运行的时间太短了，只有一个字节的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-21T13:46:36.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-21T13:46:36.000Z"}]]},"readingTime":{"minutes":2.11,"words":633},"git":{"updatedTime":1750513596000,"contributors":[{"name":"代码・生 活・THINKING","username":"","email":"2069057986@qq.com","commits":3,"avatar":"https://gravatar.com/avatar/83898b2cefe8f7adb7ee830803c5872dc86f22f59d8156ec42a2df135ea55c11?d=retro"}],"changelog":[{"hash":"19cb29640f99bb1e9c5cd24222d96b50e40462c7","time":1750513596000,"email":"2069057986@qq.com","author":"代码・生 活・THINKING","message":"fix:the project add"},{"hash":"7b20b4ccb83e60cdceea377d27a4c922c305d7fa","time":1750505844000,"email":"2069057986@qq.com","author":"代码・生 活・THINKING","message":"fix:git-balabala🚀"},{"hash":"e87131f78ad7c6e690c8c31352cb3afbb7bdb8a7","time":1748140449000,"email":"2069057986@qq.com","author":"代码・生 活・THINKING","message":"docs:输入/输出管理目录fix🚀"}]},"autoDesc":true,"filePathRelative":"notes/cs-basic/3.操作系统/5.输入输出管理.md","headers":[]}');export{p as comp,d as data};
