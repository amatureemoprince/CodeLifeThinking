import{_ as a,c as i,b as e,o as n}from"./app-B_u-pbfJ.js";const t={};function r(p,s){return n(),i("div",null,s[0]||(s[0]=[e(`<h2 id="运算方法和运算电路" tabindex="-1"><a class="header-anchor" href="#运算方法和运算电路"><span><strong>运算方法和运算电路</strong></span></a></h2><p>计算机的一个核心功能就是<strong>运算</strong>，有没有想过内部的运算逻辑是怎样的呢？先从大局认识一下吧。</p><p>其中最核心的就是运算器，其由算术逻辑单元（ALU）、移位器、状态寄存器（PSW）、通用寄存器等部件构成，可以提供<strong>四则运算</strong>、<strong>移位和求补操作</strong>、<strong>逻辑运算</strong>等功能。</p><hr><h3 id="基本运算部件" tabindex="-1"><a class="header-anchor" href="#基本运算部件"><span><strong>基本运算部件</strong></span></a></h3><hr><h3 id="定点数的移位运算" tabindex="-1"><a class="header-anchor" href="#定点数的移位运算"><span><strong>定点数的移位运算</strong></span></a></h3><hr><h3 id="定点数的加减运算" tabindex="-1"><a class="header-anchor" href="#定点数的加减运算"><span><strong>定点数的加减运算</strong></span></a></h3><hr><p>这里主要讨论<strong>补码</strong>和<strong>原码</strong>，其中<strong>补码</strong>又是最重要的！计算机中数值的表达和计算通常采用补码。</p><h3 id="定点数的乘除运算" tabindex="-1"><a class="header-anchor" href="#定点数的乘除运算"><span><strong>定点数的乘除运算</strong></span></a></h3><h2 id="浮点数的表示与运算" tabindex="-1"><a class="header-anchor" href="#浮点数的表示与运算"><span><strong>浮点数的表示与运算</strong></span></a></h2><p>在计算机中不光有整数，更常见的是<strong>浮点数</strong>。所谓“浮点”，就是小数点的位置是可以上下浮动。</p><hr><h3 id="浮点数的表示" tabindex="-1"><a class="header-anchor" href="#浮点数的表示"><span><strong>浮点数的表示</strong></span></a></h3><p>浮点数的表示和小学学过的科学计数法类似，其包含三个显示的数值和一个隐含的数值，显示的分别为<strong>符号位</strong>、<strong>阶码</strong>、<strong>尾数</strong>；隐含的是<strong>基数</strong>。</p><p>常见的是短浮点数格式：1位符号位（0正1负）+8位阶码（补码表示）+23位尾数（原码表示）。</p><hr><h3 id="浮点数的加减运算" tabindex="-1"><a class="header-anchor" href="#浮点数的加减运算"><span><strong>浮点数的加减运算</strong></span></a></h3><hr><h3 id="数据的大小端和对齐方式" tabindex="-1"><a class="header-anchor" href="#数据的大小端和对齐方式"><span><strong>数据的大小端和对齐方式</strong></span></a></h3><p>数据在计算机中的存放方式有大端和小端之分，但这只是种存储数据的方式罢了，没有什么特殊含义。</p><p><strong>大端方式</strong>是将数据的低位部分存储到主存高位地址；<strong>小端方式</strong>是将数据的低位部分存储到主存低位地址。</p><p>举个例子：有个变量i地址为0800H，字节01234567H，按字节编址。显然i的最低位部分为67H，最高位部分为01H，若以小端方式存储，则67H存在主存地址0800H，45H存在主存地址0801H，以此类推。</p><p>计算机一次访存可以读取一个存储字的数据，若一个数据存储在两个存储字中，则需要两次访存，这样系统效率就被拖低了，为了防止这种情况的产生，将数据按<strong>边界对齐</strong>方式存储，换句话说，就是要让存储的数据整体放在一个存储字中，这样一次访存就可以取得目标数据，提高了系统效率。</p><p>为了实现这样的效果，在存储数据时可能会“浪费”部分内存用于填充空白字节，但往往这种“浪费”是值得的。</p><p>现代计算机都是按字节编址的，假设存储字长为32位，则一个存储字可以存放4字节，现在要在内存中存储“字节1、字节2、字节3、半字1、字1”，应该怎样存放呢？</p><p>因为要将数据整体存放在一个存储字中，所以字节1到字节3都可以存放在一个存储字中，由于存储字长为32位，还剩下1个字节没用，但紧接着要存储半字1，显然一个字节存不下去了，所以只能将半字1存储到下一个存储字中，同理，字1也得存储到下一个存储字中，每个存储字没有存储数据的部分填充空白字节。</p><figure><img src="https://raw.githubusercontent.com/amatureemoprince/java-cofe-pictures/master/边界对齐.png" alt="例子示意图" tabindex="0" loading="lazy"><figcaption>例子示意图</figcaption></figure><p>对于边界对齐，在C语言的结构体中也有应用，主要是掌握住<strong>结构体内每个成员按类型字节数大小对齐</strong>和<strong>结构体占用字节数为结构体内最大类型字节的倍数</strong>。</p><div class="demo-wrapper has-title no-padding"><div class="demo-head"><div class="demo-ctrl"><i></i><i></i><i></i></div><h4 class="demo-title"><p>两个结构体</p></h4></div><div class="demo-container"><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">struct</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> A</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	char</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	short</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">struct</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> B</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	char</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	short</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div></div><p>仍保持存储字长为32位，对于<code>A</code>结构体而言，<code>a</code>会占用一个存储字，<code>b</code>和<code>c</code>共占一个存储字，所以<code>sizeof(A)=8</code>；对于<code>B</code>结构体同理可得应占10字节，但是要保证<code>B</code>结构体字节数为<code>sizeof(int)=4</code>的倍数，所以分配12字节，也就是<code>sizeof(B)=12</code>。</p>`,33)]))}const h=a(t,[["render",r]]),c=JSON.parse('{"path":"/cs-basic/principle/data-performance/","title":"数据在计算机中的表示方式","lang":"zh-CN","frontmatter":{"title":"数据在计算机中的表示方式","createTime":"2025/05/16 21:55:33","permalink":"/cs-basic/principle/data-performance/","icon":"carbon:data-share","description":"运算方法和运算电路 计算机的一个核心功能就是运算，有没有想过内部的运算逻辑是怎样的呢？先从大局认识一下吧。 其中最核心的就是运算器，其由算术逻辑单元（ALU）、移位器、状态寄存器（PSW）、通用寄存器等部件构成，可以提供四则运算、移位和求补操作、逻辑运算等功能。 基本运算部件 定点数的移位运算 定点数的加减运算 这里主要讨论补码和原码，其中补码又是最重...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据在计算机中的表示方式\\",\\"image\\":[\\"https://raw.githubusercontent.com/amatureemoprince/java-cofe-pictures/master/边界对齐.png\\"],\\"dateModified\\":\\"2025-06-21T13:46:36.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://codelifethinking.com/CodeLifeThinking/cs-basic/principle/data-performance/"}],["meta",{"property":"og:site_name","content":"代码・生 活・THINKING"}],["meta",{"property":"og:title","content":"数据在计算机中的表示方式"}],["meta",{"property":"og:description","content":"运算方法和运算电路 计算机的一个核心功能就是运算，有没有想过内部的运算逻辑是怎样的呢？先从大局认识一下吧。 其中最核心的就是运算器，其由算术逻辑单元（ALU）、移位器、状态寄存器（PSW）、通用寄存器等部件构成，可以提供四则运算、移位和求补操作、逻辑运算等功能。 基本运算部件 定点数的移位运算 定点数的加减运算 这里主要讨论补码和原码，其中补码又是最重..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/amatureemoprince/java-cofe-pictures/master/边界对齐.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-21T13:46:36.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-21T13:46:36.000Z"}]]},"readingTime":{"minutes":3.58,"words":1075},"git":{"updatedTime":1750513596000,"contributors":[{"name":"代码・生 活・THINKING","username":"","email":"2069057986@qq.com","commits":4,"avatar":"https://gravatar.com/avatar/83898b2cefe8f7adb7ee830803c5872dc86f22f59d8156ec42a2df135ea55c11?d=retro"}],"changelog":[{"hash":"19cb29640f99bb1e9c5cd24222d96b50e40462c7","time":1750513596000,"email":"2069057986@qq.com","author":"代码・生 活・THINKING","message":"fix:the project add"},{"hash":"7b20b4ccb83e60cdceea377d27a4c922c305d7fa","time":1750505844000,"email":"2069057986@qq.com","author":"代码・生 活・THINKING","message":"fix:git-balabala🚀"},{"hash":"c23856bf5f709d0fb79ff938cbe7e223f43ca96a","time":1747441766000,"email":"2069057986@qq.com","author":"代码・生 活・THINKING","message":"docs:408-siderbar-over🚀"},{"hash":"162ad30c6e92c840de0ece0a6a67202658909427","time":1747409814000,"email":"2069057986@qq.com","author":"代码・生 活・THINKING","message":"docs:408-sidebar"}]},"autoDesc":true,"filePathRelative":"notes/cs-basic/4.计算机组成原理/2.数据在计算机中的表示方式.md","headers":[]}');export{h as comp,c as data};
