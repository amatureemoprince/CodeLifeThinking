import{_ as s,c as e,b as t,o as n}from"./app-B_u-pbfJ.js";const m={};function r(o,a){return n(),e("div",null,a[0]||(a[0]=[t('<p>常微分方程这里主要是<strong>理清楚相关概念和计算方法</strong>，偶尔会出现一些综合题和应用题，这些需要根据题目中的条件构造方程，再利用相关计算方法计算原函数。</p><h2 id="微分方程的相关概念" tabindex="-1"><a class="header-anchor" href="#微分方程的相关概念"><span><strong>微分方程的相关概念</strong></span></a></h2><p>什么是微分方程呢？包含参数的方程叫参数方程，包含两个未知数的方程称为二元方程，那么以此类推可知，包含微分的方程就要微分方程，也就是包含微分或导数的方程。</p><p>其中包含未知函数的<strong>最高阶导数的阶数</strong>称为该微分方程的<strong>阶</strong>。</p><p>满足微分方程的函数称为该微分方程的<strong>解</strong>，在各个解中有两类特殊的解，一是通解，一是特解。</p><p><strong>通解</strong>就是解中含有的任意常数的个数和微分方程的阶数相同；<strong>特解</strong>就是解中不含有任意常数，全是具体的数值。</p><p>在某些题中会出现一些关系式，是关于特解的，利用这些关系式就可以在求出通解后计算出特解，这些关系式被称为<strong>初始条件</strong>。</p><h2 id="一阶微分方程" tabindex="-1"><a class="header-anchor" href="#一阶微分方程"><span><strong>一阶微分方程</strong></span></a></h2><p>一阶微分方程中未知函数的最高阶数为1，此类微分方程是最好解的。</p><h3 id="可分离变量的方程" tabindex="-1"><a class="header-anchor" href="#可分离变量的方程"><span><strong>可分离变量的方程</strong></span></a></h3><hr><p>能表示为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mi>d</mi><mi>y</mi><mo>=</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">f(y)dy=g(x)dx</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span></span>形式的方程，解法很简单，直接等号两侧同时积分则可。</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo>∫</mo><mi>f</mi><mo stretchy="false">(</mo><mi>y</mi><mo stretchy="false">)</mo><mi>d</mi><mi>y</mi><mo>=</mo><mo>∫</mo><mi>g</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mi>d</mi><mi>x</mi></mrow><annotation encoding="application/x-tex">\\int f(y)dy=\\int g(x)dx </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.2222em;vertical-align:-0.8622em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mord mathnormal">d</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.2222em;vertical-align:-0.8622em;"></span><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011em;">∫</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mord mathnormal">d</span><span class="mord mathnormal">x</span></span></span></span></span></p><h3 id="齐次方程" tabindex="-1"><a class="header-anchor" href="#齐次方程"><span><strong>齐次方程</strong></span></a></h3><hr><h3 id="线性方程" tabindex="-1"><a class="header-anchor" href="#线性方程"><span><strong>线性方程</strong></span></a></h3><hr><h2 id="可降阶的高阶方程" tabindex="-1"><a class="header-anchor" href="#可降阶的高阶方程"><span><strong>可降阶的高阶方程</strong></span></a></h2><h2 id="高阶线性微分方程" tabindex="-1"><a class="header-anchor" href="#高阶线性微分方程"><span><strong>高阶线性微分方程</strong></span></a></h2><h3 id="常系数齐次线性微分方程" tabindex="-1"><a class="header-anchor" href="#常系数齐次线性微分方程"><span><strong>常系数齐次线性微分方程</strong></span></a></h3>',20)]))}const p=s(m,[["render",r]]),c=JSON.parse('{"path":"/postgraduate/math/higher-mathematics/ordinary-differential-equation/","title":"常微分方程","lang":"zh-CN","frontmatter":{"title":"常微分方程","createTime":"2025/05/18 15:30:56","permalink":"/postgraduate/math/higher-mathematics/ordinary-differential-equation/","icon":"file-icons:mathematica","description":"常微分方程这里主要是理清楚相关概念和计算方法，偶尔会出现一些综合题和应用题，这些需要根据题目中的条件构造方程，再利用相关计算方法计算原函数。 微分方程的相关概念 什么是微分方程呢？包含参数的方程叫参数方程，包含两个未知数的方程称为二元方程，那么以此类推可知，包含微分的方程就要微分方程，也就是包含微分或导数的方程。 其中包含未知函数的最高阶导数的阶数称为...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常微分方程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-16T14:54:21.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://codelifethinking.com/CodeLifeThinking/postgraduate/math/higher-mathematics/ordinary-differential-equation/"}],["meta",{"property":"og:site_name","content":"代码・生 活・THINKING"}],["meta",{"property":"og:title","content":"常微分方程"}],["meta",{"property":"og:description","content":"常微分方程这里主要是理清楚相关概念和计算方法，偶尔会出现一些综合题和应用题，这些需要根据题目中的条件构造方程，再利用相关计算方法计算原函数。 微分方程的相关概念 什么是微分方程呢？包含参数的方程叫参数方程，包含两个未知数的方程称为二元方程，那么以此类推可知，包含微分的方程就要微分方程，也就是包含微分或导数的方程。 其中包含未知函数的最高阶导数的阶数称为..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-16T14:54:21.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-16T14:54:21.000Z"}]]},"readingTime":{"minutes":1.48,"words":445},"git":{"updatedTime":1752677661000,"contributors":[{"name":"代码・生 活・THINKING","username":"","email":"2069057986@qq.com","commits":9,"avatar":"https://gravatar.com/avatar/83898b2cefe8f7adb7ee830803c5872dc86f22f59d8156ec42a2df135ea55c11?d=retro"}],"changelog":[{"hash":"bea7a1526fcf01e4755472aca92143b86562d663","time":1752677661000,"email":"2069057986@qq.com","author":"代码・生 活・THINKING","message":"docs:高数🚀"},{"hash":"19cb29640f99bb1e9c5cd24222d96b50e40462c7","time":1750513596000,"email":"2069057986@qq.com","author":"代码・生 活・THINKING","message":"fix:the project add"},{"hash":"7b20b4ccb83e60cdceea377d27a4c922c305d7fa","time":1750505844000,"email":"2069057986@qq.com","author":"代码・生 活・THINKING","message":"fix:git-balabala🚀"},{"hash":"f4d027cb321f20d6d1ef32bb0f40d209203ac7f2","time":1749915446000,"email":"2069057986@qq.com","author":"代码・生 活・THINKING","message":"fix:移动目录🚀"},{"hash":"561cf46bae329a1a0ea3312018f037199ded5e6c","time":1749881824000,"email":"2069057986@qq.com","author":"代码・生 活・THINKING","message":"fix:移动目录🚀"},{"hash":"2d2391d7ef3d4a21bd101d1e2c4152b3b90204a9","time":1749827170000,"email":"2069057986@qq.com","author":"代码・生 活・THINKING","message":"fix:重构代码-白色背景🚀"},{"hash":"e74b9ea6b402de4dfcba21179f886a37cfcfc7fa","time":1749285794000,"email":"2069057986@qq.com","author":"代码・生 活・THINKING","message":"docs:高数🚀"},{"hash":"5312c12f4d72e63746b8bb601714e0e7d1d52b0b","time":1748657833000,"email":"2069057986@qq.com","author":"代码・生 活・THINKING","message":"docs:重构🚀"},{"hash":"948372588e936feb42db5a1fade09e644ba8f6dd","time":1747553556000,"email":"2069057986@qq.com","author":"代码・生 活・THINKING","message":"docs:math-contents🚀"}]},"autoDesc":true,"filePathRelative":"notes/2.postgraduate/math/1.高数部分/4.常微分方程.md","headers":[]}');export{p as comp,c as data};
